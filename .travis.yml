language: node_js

git:
  # Minimize git history, but ensure to not break things:
  # - Merging multiple PR's around same time may introduce a case where it's not
  #   the last merge commit that is to be tested
  # - Aside of merge commit we need a previous commit to be able to detect a version switch
  depth: 10

cache:
  # Not relying on 'npm' shortcut, as per Travis docs it's the only 'node_modules' that it'll cache
  directories:
    - $HOME/.npm
    - node_modules

branches:
  only:
    - master # Do not build PR branches
    - /^v\d+\.\d+\.\d+$/ # Ensure to build release tags

stages:
  - name: Test
  - name: Deploy
    if: tag =~ ^v\d+\.\d+\.\d+$

env:
  global:
    - FORCE_COLOR=1 # Ensure colored output (color support is not detected in some cases)

# Ensure to install dependencies at their latest versions
install:
  # Note: with `npm update` there seems no way to update all project dependency groups in one run
  - npm update --no-save # Updates just dependencies
  # Note: npm documents --dev option for dev dependencies update, but it's only --save-dev that works
  - npm update --save-dev --no-save # Updates just devDependencies

before_script:
  # Fail build right after first script fails. Travis doesn't ensure that: https://github.com/travis-ci/travis-ci/issues/1066
  # More info on below line: https://www.davidpashley.com/articles/writing-robust-shell-scripts/#idm5413512
  - set -e

# Ensure to fail build if deploy fails, Travis doesn't ensure that: https://github.com/travis-ci/travis-ci/issues/921
before_deploy:
  # Remove eventual old npm logs
  - rm -rf ~/.npm/_logs
after_deploy:
  - |
    # npm creates log only on failure
    if [ -d ~/.npm/_logs ]; then
      # Undocumented way to force Travis build to fail
      travis_terminate 1
    fi

jobs:
  include:
    # In most cases it's best to configure one job per platform & Node.js version combination
    # (job boot & setup takes ca 1 minute, one task run lasts ca few seconds)

    # PR's from branches
    # Ensure commit messages follow CC, and confirm on changelog in case of release PR's
    - name: 'Prettier check updated, Lint updated, Commitlint, Changelog confirm (on release) - Node.js v12'
      if: type = pull_request AND fork = false
      node_js: 12
      script:
        - npm run prettier-check:updated
        - npm run lint:updated
        - npm run commitlint-ci-pull-request
        # If release PR, confirm we have a changelog
        - |
          tagName=`git diff master package.json | grep '"version": "' | tail -n 1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+"` || :
          if [ -n "$tagName" ];
          then
            npx dump-release-notes-from-cc-changelog $tagName
          fi

    # PR's from forks
    # Do not validate commit messages,
    # (if user didn't ensure CC, PR should be squash merged with a valid CC commit message)
    - name: 'Prettier check updated, Lint updated - Node.js v12'
      if: type = pull_request AND fork = true
      node_js: 12
      script:
        - npm run prettier-check:updated
        - npm run lint:updated

    # master branch
    - name: 'Lint, Tag on version bump - Node.js v12'
      env:
        # GITHUB_TOKEN
        - secure: CHANGEME
      if: branch = master AND type = push
      node_js: 12
      script:
        - npm run lint
        # If package version was changed with last merged PR, push tag
        - |
          tagName=`git diff HEAD^ package.json | grep '"version": "' | tail -n 1 | grep -oE "[0-9]+\.[0-9]+\.[0-9]+"` || :
          if [ -n "$tagName" ];
          then
            git tag v$tagName
            git push -q https://$GITHUB_TOKEN@github.com/serverless/CHANGEME --tags
          fi

    # version tag
    - stage: Deploy
      env:
        # GITHUB_TOKEN
        - secure: CHANGEME
      node_js: 12
      script: skip
      deploy:
        provider: npm
        email: services@serverless.com
        on:
          tags: true
        api_key:
          secure: CHANGEME
      after_deploy: npx github-release-from-cc-changelog $TRAVIS_TAG
